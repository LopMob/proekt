stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

before_script:
  - python --version
  - pip install --upgrade pip

# üîç –õ–∏–Ω—Ç–µ—Ä (pylint)
lint:
  stage: lint
  script:
    - pip install pylint
    - pylint app.py
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# üß™ –¢–µ—Å—Ç—ã (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å –∏—Ö –≤ –ø–∞–ø–∫—É tests/)
test:
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install pytest
    - pytest || echo "–Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# üê≥ Docker build –∏ push
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# üöÄ –î–µ–ø–ª–æ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —á–µ—Ä–µ–∑ Ansible –∏–ª–∏ SSH)
# –∑–¥–µ—Å—å –ø–æ–∫–∞ placeholder
deploy:
  stage: deploy
  script:
    - echo "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–ø–ª–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä, ansible-playbook –∏–ª–∏ ssh-—Å—Ü–µ–Ω–∞—Ä–∏–π."
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

